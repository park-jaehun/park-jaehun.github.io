<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-26T00:11:58+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">포뇨의 애옥살이</title><subtitle>Welcome to my homepage!</subtitle><author><name>jerryPark</name><email>pjhun588@gmail.com</email></author><entry><title type="html">[SQL 정복하기]테이블에서 데이터 검색</title><link href="http://localhost:4000/sql/SQL/" rel="alternate" type="text/html" title="[SQL 정복하기]테이블에서 데이터 검색" /><published>2021-07-25T00:00:00+09:00</published><updated>2021-07-25T00:00:00+09:00</updated><id>http://localhost:4000/sql/SQL</id><content type="html" xml:base="http://localhost:4000/sql/SQL/">&lt;p&gt;코딩 테스트를 준비하면서 생각보다 SQL 문제가 많이 출제 되어서 기본적인 문법을 바탕을 정리하고 문제들을 풀어보는 방식으로 진행하겠습니다.&lt;/p&gt;

&lt;p&gt;실제로 SQL은 조회부분이 가장 많이 쓰이고, 중요합니다. 이 부분을 중점으로 공부하도록 하겠습니다. 그럼 바로 시작하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;1-select--from-테이블명&quot;&gt;1. SELECT * FROM 테이블명&lt;/h1&gt;
&lt;p&gt;SELECT와 그리고 FROM 사이에는 스페이스를 넣어서 구분합니다. 입력이 끝나면 명령의 마지막을 나타내는 세미콜론(;)을 넣은 뒤 Enter를 누르면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM SAMPLE21;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테이블의 열은 많아야 몇십 개 정도지만 행은 열에 비해 훨씬 많을 수 있습니다. 데이터베이스의 규모에 따라서 다르지만 일반적으로 수백 건에서 대규모의 경우 수천만 건의 행에 달하는 경우도 있습니다. 이처럼 많은 행 속에서 필요한 데이터만 검색하기 위해서는 WHERE 구를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# where구로 name 열 값이 &apos;박준용&apos;인 행만 출력

SELECT * FROM SAMPLE21 WHERE name = &apos;박준용&apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;name 열은 no 열과 자료형이 다른 문자열형입니다. 수치형 조건식의 경우 비교할 숫자를 그대로 조건식에 표기합니다. 하지만 문자열형을 비교할 경우는 ‘박준용’처럼  &lt;strong&gt;싱글쿼트&lt;/strong&gt;로 둘러싸 표기합니다.&lt;/p&gt;

&lt;p&gt;그럼 SELECT문법을 익혀보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 값이 서로 다른 경우 ‘&amp;lt;&amp;gt;’&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM sample21 WHERE no &amp;lt;&amp;gt; 2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;**- NULL 값 검색 **&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM SAMPLE21 WHERE birthday IS NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;null 값을 검색할 경우에는 IS NULL을 사용합니다!
다음으로 살펴볼 문법은 비교연산자인데 다른 프로그래밍 언어 유사하기 때문에 넘어가도록 하겠습니다. 다만 주의할점은 등호일 경우 ‘==’이 아닌 ‘=’임을 주의하시길 바랍니다.&lt;/p&gt;

&lt;h1 id=&quot;2-조건-조합하기&quot;&gt;2. 조건 조합하기&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;- 1. AND로 조합하기&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM sample24 WHERE a&amp;lt;&amp;gt;0 AND b&amp;lt;&amp;gt;0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;**-2. OR 조합하기 **&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM sample24 WHERE a&amp;lt;&amp;gt;0 OR b&amp;lt;&amp;gt;0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;-3. NOT으로 조합하기&lt;/strong&gt;
a열이 0이 아니거나 b열이 0이 아닌 행을 제외한 나머지 행을 검색&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM sample24 WHERE NOT(a&amp;lt;&amp;gt;0 OR b&amp;lt;&amp;gt;0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-패턴-매칭에-의한-검색&quot;&gt;3. 패턴 매칭에 의한 검색&lt;/h1&gt;

&lt;p&gt;like 술어를 사용하여 패턴 매칭으로 검색할 수 있습니다. 패턴을 정의할 때는 사용할 수 있는 메타문자로는 %와 _이 있습니다. 두 개의 차이점이 있다면 %는 임의의 문자열을 의미하며 _는 임의의 문자 하나만을 의미합니다. 그렇다보니 패턴 매칭을 사용할 시에는 _보다는 %를 좀 많이 사용하는 경향이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전방일치: SQL은 RDBMS를 ….-&amp;gt; SQL%&lt;/li&gt;
  &lt;li&gt;중간일치: LIKE는 SQL에서 사용 …..-&amp;gt; %SQL%&lt;/li&gt;
  &lt;li&gt;후방일치: 입문 SQL -&amp;gt; %SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;# 4.정렬과 연산
age 열의 값을 오름차순으로 정렬하기&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM sample31 ORDER BY age;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;내림차순-정렬&quot;&gt;내림차순 정렬&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM sample31 ORDER BY age DESC;
&lt;/code&gt;&lt;/pre&gt;</content><author><name>jerryPark</name><email>pjhun588@gmail.com</email></author><category term="SQL" /><category term="SQL" /><summary type="html">SQL 첫 걸음</summary></entry><entry><title type="html">[이것이 코딩테스트다 with Python]01.왕실의 나이트</title><link href="http://localhost:4000/codingtest/codingtest/" rel="alternate" type="text/html" title="[이것이 코딩테스트다 with Python]01.왕실의 나이트" /><published>2021-07-24T00:00:00+09:00</published><updated>2021-07-24T00:00:00+09:00</updated><id>http://localhost:4000/codingtest/codingtest</id><content type="html" xml:base="http://localhost:4000/codingtest/codingtest/">&lt;ul&gt;
  &lt;li&gt;문제
    &lt;ul&gt;
      &lt;li&gt;8 x 8  좌표 평면에서 나이트는 다음과 같은 2가지 경우로 이동할 수 있다.&lt;/li&gt;
      &lt;li&gt;수평으로 두 칸 이동한 뒤에 수직으로 한 이동하기&lt;/li&gt;
      &lt;li&gt;수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 출력하는 프로그램을 작성하시오 &lt;br /&gt;
이 때 왕실의 정원에서 행 위치를 표현할 때는 1부터 8로 표현하면, 열 위치를 표현할 때는 a부터 h까지 표현한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 입력 예시 &lt;/b&gt; &lt;br /&gt;
a1 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; 출력 예시 &lt;/b&gt; &lt;br /&gt;
2&lt;/p&gt;

&lt;p&gt;구현에 앞서 값들을 받아오는 작업을 수행해야합니다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;값을 받아온 후에 나이트가 움직일 수 있는 경우의 수를 계산하는 코드를 작성해보도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jerryPark</name><email>pjhun588@gmail.com</email></author><category term="codingtest" /><category term="codingtest" /><summary type="html">이것이 코딩테스트다 with Python</summary></entry></feed>